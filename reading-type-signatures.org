* The Signature
  #+BEGIN_SRC haskell
    map :: (Functor f) => (a -> b) -> f a -> f b
  #+END_SRC

* Sum Types
  #+BEGIN_SRC haskell
    data Bool = True | False

    data Int = 1 | 2 | 3 | ...

    data DayOfTheWeek = Mon | Tue | Wed | Thu | Fri | Sat | Sun

    returnCode :: Bool -> Int
    returnCode True  = 1
    returnCode False = 0

    isTheWeekend :: DayOfTheWeek -> Bool
    isTheWeekend Sat = True
    isTheWeekend Sun = True
    isTheWeekend _   = False
  #+END_SRC

* Product Types
  #+BEGIN_SRC haskell
    data Point = Point Int Int

    data Person =
      Person { name :: String
             , age  :: Int
             }
  #+END_SRC

* Higher Kinded Types
  #+BEGIN_SRC haskell
    Int   :: Type

    data Maybe a = Just a | Nothing
    Maybe :: Type -> Type

    data Pair a b = Pair a b
    Pair :: Type -> Type -> Type
  #+END_SRC

* The Signature
  #+BEGIN_SRC haskell
    map :: (Functor f) => (a -> b) -> f a -> f b
  #+END_SRC

* Specialized to Lists
  #+BEGIN_SRC haskell
    mapList :: (a -> b) -> [] a -> [] b
  #+END_SRC

* Operating on concrete types
  #+BEGIN_SRC haskell
    mapIntToChar :: (Int -> Char) -> [] Int -> [] Char
  #+END_SRC
